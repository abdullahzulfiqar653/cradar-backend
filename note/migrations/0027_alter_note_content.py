# Generated by Django 4.2.3 on 2023-12-09 08:59

import json

from django.db import migrations, models


def convert_content_to_content_state(apps, schema_editor):
    Note = apps.get_model("note", "Note")
    Highlight = apps.get_model("takeaway", "Highlight")
    for note in Note.objects.all():
        highlights = Highlight.objects.filter(note=note)
        content_state = {
            "blocks": [{"text": block} for block in note.content.split("\n")],
        }
        for highlight in highlights:
            block_start = 0
            highlighting = False
            for block in content_state["blocks"]:
                block_end = block_start + len(block["text"])
                if (
                    highlighting is False
                    and block_start <= highlight.start <= block_end
                ):
                    if block_start <= highlight.end <= block_end:
                        # The highlight starts and ends in the same block
                        inline_style_ranges = block.setdefault("inlineStyleRanges", [])
                        inline_style_ranges.append(
                            {
                                "id": highlight.id,
                                "offset": highlight.start - block_start,
                                "length": highlight.end - highlight.start,
                                "style": "HIGHLIGHT",
                            }
                        )
                        break
                    else:  # The highlight continues to the next block
                        inline_style_ranges = block.setdefault("inlineStyleRanges", [])
                        inline_style_ranges.append(
                            {
                                "id": highlight.id,
                                "offset": highlight.start - block_start,
                                "length": block_end - highlight.start,
                                "style": "HIGHLIGHT",
                            }
                        )
                        highlighting = True
                elif highlighting is True and block_end <= highlight.end:
                    # The highlight starts before the current block
                    # and goes beyond the current block
                    inline_style_ranges = block.setdefault("inlineStyleRanges", [])
                    inline_style_ranges.append(
                        {
                            "id": highlight.id,
                            "offset": 0,
                            "length": block_end - block_start,
                            "style": "HIGHLIGHT",
                        }
                    )
                elif highlighting is True and block_start <= highlight.end <= block_end:
                    # The highlight starts before this block and ends at this block
                    inline_style_ranges = block.setdefault("inlineStyleRanges", [])
                    inline_style_ranges.append(
                        {
                            "id": highlight.id,
                            "offset": 0,
                            "length": highlight.end - block_start,
                            "style": "HIGHLIGHT",
                        }
                    )
                    break
                block_start = block_end + 1
        note.content = json.dumps(content_state)
        note.save()


def revert_convert_content_to_content_state(apps, schema_editor):
    Note = apps.get_model("note", "Note")
    Highlight = apps.get_model("takeaway", "Highlight")
    for note in Note.objects.all():
        note_content = json.loads(note.content)
        if note_content is not None:
            new_highlights = dict()
            pointer = 0
            for block in note_content["blocks"]:
                for srange in block.get("inlineStyleRanges", []):
                    if srange["style"] != "HIGHLIGHT":
                        continue
                    highlight_id = srange.get("id")
                    if highlight_id is None:
                        print("Highlight in content state don't have id")
                        continue
                    start = srange["offset"]
                    end = srange["offset"] + srange["length"]
                    highlighted_text = block["text"][start:end]
                    new_highlight = new_highlights.setdefault(highlight_id, {})
                    if "title" not in new_highlight:
                        new_highlight["title"] = highlighted_text
                        new_highlight["start"] = pointer + start
                        new_highlight["end"] = pointer + end
                    else:
                        new_highlight["title"] += "\n" + highlighted_text
                        new_highlight["end"] = pointer + end
                pointer += len(block["text"]) + 1

            db_highlights = {
                highlight.id: highlight
                for highlight in Highlight.objects.filter(note=note)
            }
            highlights_to_update = []
            for highlight_id, new_highlight in new_highlights.items():
                highlight = db_highlights.get(highlight_id)
                if highlight is None:
                    print(f"The highlight {highlight_id} is not found and skipped")
                    continue
                highlight.title = new_highlight["title"]
                highlight.start = new_highlight["start"]
                highlight.end = new_highlight["end"]
                highlights_to_update.append(highlight)
            Highlight.objects.bulk_update(
                highlights_to_update,
                ["title", "start", "end"],
            )
            Highlight.objects.filter(note=note).exclude(
                id__in=new_highlights.keys()
            ).delete()

            content = [block["text"] for block in note_content["blocks"]]
            note.content = "\n".join(content)
        else:  # note.content is None
            note.content = ""
        note.save()


class Migration(migrations.Migration):
    dependencies = [
        ("takeaway", "0014_alter_takeaway_tags"),
        ("note", "0026_alter_note_file_type"),
    ]

    operations = [
        migrations.RunPython(
            code=convert_content_to_content_state,
            reverse_code=revert_convert_content_to_content_state,
        ),
        migrations.AlterField(
            model_name="note",
            name="content",
            field=models.JSONField(null=True),
        ),
    ]
