version: '3.8'

x-common:
  volumes: &volumes
    - ./:/app

services:
  backend:
    image: backend
    build:
      context: .
    env_file:
      - .env
    working_dir: /app
    ports:
      - "8000:8000"
    volumes: *volumes
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  frontend:
    profiles:
      - local
    build:
      context: ./frontend # Directory containing the React Dockerfile
      dockerfile: Dockerfile
    env_file:
      - frontend/.env.local
    ports:
      - "3000:4173"

  nginx:
    profiles:
      - local
    image: nginx:latest
    ports:
      - "8084:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./static/:/static/
      - ./media/:/media/
    depends_on:
      - backend
      - frontend

  db:
    profiles:
      - local
    image: postgres:15.1-alpine
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${MASTER_DB_PASSWORD}
      POSTGRES_DB: "cradar"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -q -d cradar -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 3
    volumes:
      - postgres-data:/var/lib/postgresql/data
  
  beat:
    image: backend
    command: celery --app=cradarai beat --loglevel=info --schedule=/tmp/celerybeat-schedule
    volumes: *volumes
    depends_on:
      - backend

  worker:
    image: backend
    command: celery --app=cradarai worker --loglevel=info --pool=gevent --concurrency=20
    volumes: *volumes
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "celery", "--app=cradarai", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  redis:
    image: redis:latest
    ports:
      - 6379:6379

volumes:
  postgres-data: