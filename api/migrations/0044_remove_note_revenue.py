# Generated by Django 4.2.3 on 2024-06-28 04:34

from django.db import migrations
from django.db.models import Max


def move_revenue_to_property(apps, schema_editor):
    Project = apps.get_model("api", "Project")
    Note = apps.get_model("api", "Note")
    Property = apps.get_model("api", "Property")
    Option = apps.get_model("api", "Option")
    NoteProperty = apps.get_model("api", "NoteProperty")
    NotePropertyOption = apps.get_model("api", "NotePropertyOption")

    # We exclude projects that already have the property "Revenue Estimation"
    projects_to_exclude = [
        project
        for project in Project.objects.filter(properties__name="Revenue Estimation")
    ]
    projects = Project.objects.exclude(properties__name="Revenue Estimation")

    # Create properties
    properties_to_create = []
    project_property_max_order = {
        project["id"]: project["max_order"]
        for project in projects.values("id").annotate(
            max_order=Max("properties__order")
        )
        if project["max_order"] is not None
    }
    for project in projects.distinct():
        max_order = project_property_max_order.get(project.id, -1)
        properties_to_create.append(
            Property(
                name="Revenue Estimation",
                project=project,
                data_type="Select",
                order=max_order + 1,
            )
        )
    Property.objects.bulk_create(properties_to_create)

    # Create options
    options_to_create = []
    newly_added_properties = Property.objects.filter(name="Revenue Estimation").exclude(
        project__in=projects_to_exclude
    )
    for property in newly_added_properties:
        options_to_create.extend(
            [
                Option(name="High", property=property, order=0),
                Option(name="Medium", property=property, order=1),
                Option(name="Low", property=property, order=2),
                Option(name="NA", property=property, order=3),
            ]
        )
    Option.objects.bulk_create(options_to_create)

    # Retrieve property and option ids
    project_property = {
        property.project_id: property
        for property in (
            Property.objects.filter(name="Revenue Estimation")
            .exclude(project__in=projects_to_exclude)
            .select_related("project")
        )
    }

    options = Option.objects.filter(
        property__in=list(project_property.values())
    ).select_related("property")
    property_revenue_option = {}
    for option in options:
        property_revenue_option.setdefault(option.property.id, {})[option.name] = option

    # Move revenue to property
    notes = Note.objects.exclude(project__in=projects_to_exclude)
    note_property_options_to_create = []
    for note in notes:
        if note.revenue is None:
            continue
        property = project_property.get(note.project_id)
        option = property_revenue_option[property.id][note.revenue]
        note_property = NoteProperty.objects.create(note=note, property=property)
        note_property_options_to_create.append(
            NotePropertyOption(note_property=note_property, option=option, order=0)
        )
    NotePropertyOption.objects.bulk_create(note_property_options_to_create)


def revert_revenue_to_property(apps, schema_editor):
    Note = apps.get_model("api", "Note")
    NoteProperty = apps.get_model("api", "NoteProperty")

    note_properties = (
        NoteProperty.objects.filter(property__name="Revenue Estimation")
        .select_related("note")
        .prefetch_related("options")
    )
    notes_to_update = []
    valid_values = ["High", "Medium", "Low"]
    for note_property in note_properties:
        option = note_property.options.first()
        if option is None:
            continue
        value = option.name
        if value not in valid_values:
            continue
        note_property.note.revenue = value
        notes_to_update.append(note_property.note)
    Note.objects.bulk_update(notes_to_update, ["revenue"])


class Migration(migrations.Migration):

    dependencies = [
        ("api", "0043_remove_theme_description"),
    ]

    operations = [
        migrations.RunPython(
            code=move_revenue_to_property,
            reverse_code=revert_revenue_to_property,
        ),
        migrations.RemoveField(
            model_name="note",
            name="revenue",
        ),
    ]
