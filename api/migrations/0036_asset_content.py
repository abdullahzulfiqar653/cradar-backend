# Generated by Django 4.2.3 on 2024-06-01 02:20

import json

import environ
from django.db import migrations, models
from playwright.sync_api import sync_playwright

import api.utils.lexical


def migrate_assets_content_to_lexical(apps, schema_editor):
    env = environ.Env()
    environ.Env.read_env(".env")
    environ.Env.read_env(".env.example")
    frontend_url = env("FRONTEND_URL")

    Asset = apps.get_model("api", "Asset")
    assets = list(Asset.objects.all())
    if len(assets) == 0:
        return
    new_asset_contents = []
    blocks = {asset.id: list(asset.blocks.order_by("order")) for asset in assets}
    with sync_playwright() as playwright:
        browser = playwright.chromium.launch(timeout=300000)
        page = browser.new_page()
        page.goto(frontend_url + "/lexical/convert")

        for asset in assets:
            asset_content = api.utils.lexical.blank_content()
            asset_blocks = blocks[asset.id]
            for block in asset_blocks:
                if block.type == "Text" and block.content:
                    page.locator("#clear-text").click()
                    page.locator("#draft-js-json-input").fill(json.dumps(block.content))
                    output_str = page.locator("#lexical-json-output").text_content()
                    block_content = json.loads(output_str)
                    if not block_content:
                        continue
                    asset_content["root"]["children"].extend(
                        block_content["root"]["children"]
                    )
                elif block.type == "Takeaways":
                    asset_content["root"]["children"].append(
                        {
                            "block_id": block.id,
                            "type": "Takeaways",
                            "version": 1,
                        }
                    )
                elif block.type == "Themes":
                    asset_content["root"]["children"].append(
                        {
                            "block_id": block.id,
                            "type": "Themes",
                            "version": 1,
                        }
                    )
            asset.content = asset_content
            new_asset_contents.append(asset)
    Asset.objects.bulk_update(new_asset_contents, ["content"])


def remove_text_blocks(apps, schema_editor):
    Asset = apps.get_model("api", "Asset")
    Block = apps.get_model("api", "Block")
    Block.objects.filter(type="Text").delete()
    blocks_to_update = []
    for asset in Asset.objects.all():
        blocks = list(asset.blocks.order_by("order"))
        for i, block in enumerate(blocks):
            block.order = i
            blocks_to_update.append(block)
    Block.objects.bulk_update(blocks_to_update, ["order"])


class Migration(migrations.Migration):

    dependencies = [
        ("api", "0035_alter_notetype_project_alter_takeawaytype_project_and_more"),
    ]

    operations = [
        migrations.AddField(
            model_name="asset",
            name="content",
            field=models.JSONField(default=api.utils.lexical.blank_content),
        ),
        migrations.RunPython(
            code=migrate_assets_content_to_lexical,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RunPython(
            code=remove_text_blocks,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
