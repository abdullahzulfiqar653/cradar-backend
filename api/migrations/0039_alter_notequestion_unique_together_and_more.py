# Generated by Django 4.2.3 on 2024-06-19 08:56
import pgvector.django
from django.db import migrations, models
from django.http import QueryDict

from api.ai.embedder import embedder

default_takeaway_types = [
    {
        "name": "Pain Point",
        "definition": "A specific problem or frustration experienced by a customer or user when using a product or service.",
    },
    {
        "name": "Aha Moment",
        "definition": "A point in time when a customer or user suddenly realizes the value or benefit of a product or service, leading to increased engagement and satisfaction.",
    },
    {
        "name": "Feature Request",
        "definition": "A suggestion or demand from a customer or user for a new feature or functionality to be added to a product or service.",
    },
    {
        "name": "Churn Signal",
        "definition": "An indication that a customer or user is likely to stop using a product or service, often based on a decrease in engagement or satisfaction.",
    },
    {
        "name": "Price Mention",
        "definition": "A reference made by a customer or user to the cost or pricing of a product or service, which may indicate price sensitivity or a willingness to pay.",
    },
    {
        "name": "Competitor Mention",
        "definition": "A reference made by a customer or user to a competing product or service, which may indicate a comparison of features, pricing, or overall satisfaction.",
    },
]


def migrate_asset_filter_to_notes(apps, schema_editor):
    Asset = apps.get_model("api", "Asset")
    Note = apps.get_model("api", "Note")
    for asset in Asset.objects.all():
        if asset.filter:
            filter_dict = QueryDict(asset.filter)
            notes = Note.objects.filter(
                models.Q(id__in=filter_dict.getlist("report_id"))
                | models.Q(type__name__in=filter_dict.getlist("report_type"))
            )
            asset.notes.set(notes)


def revert_migrate_asset_filter_to_notes(apps, schema_editor):
    Asset = apps.get_model("api", "Asset")
    for asset in Asset.objects.all():
        asset.filter = "&".join([f"report_id={note.id}" for note in asset.notes.all()])
        asset.save()


def populate_default_takeaway_type_definition(apps, schema_editor):
    TakeawayType = apps.get_model("api", "TakeawayType")
    mapping = {
        takeaway_type["name"]: takeaway_type["definition"]
        for takeaway_type in default_takeaway_types
    }
    takeaway_types_to_update = []
    for takeaway_type in TakeawayType.objects.all():
        if takeaway_type.name in mapping:
            takeaway_type.definition = mapping[takeaway_type.name]
            takeaway_types_to_update.append(takeaway_type)
    TakeawayType.objects.bulk_update(takeaway_types_to_update, ["definition"])


def populate_takeaway_type_vector(apps, schema_editor):
    TakeawayType = apps.get_model("api", "TakeawayType")
    unique_names = TakeawayType.objects.values_list("name", flat=True).distinct()
    vectors = embedder.embed_documents(unique_names)
    mapping = {name: vector for name, vector in zip(unique_names, vectors)}
    takeaway_types_to_update = []
    for takeaway_type in TakeawayType.objects.all():
        takeaway_type.vector = mapping[takeaway_type.name]
        takeaway_types_to_update.append(takeaway_type)
    TakeawayType.objects.bulk_update(takeaway_types_to_update, ["vector"])


class Migration(migrations.Migration):

    dependencies = [
        ("api", "0038_alter_note_unique_together_remove_takeaway_code_and_more"),
    ]

    operations = [
        migrations.AlterUniqueTogether(
            name="notequestion",
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name="notequestion",
            name="created_by",
        ),
        migrations.RemoveField(
            model_name="notequestion",
            name="note",
        ),
        migrations.RemoveField(
            model_name="notequestion",
            name="question",
        ),
        migrations.RemoveField(
            model_name="notetemplate",
            name="project",
        ),
        migrations.RemoveField(
            model_name="notetemplate",
            name="questions",
        ),
        migrations.AlterUniqueTogether(
            name="notetemplatequestion",
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name="notetemplatequestion",
            name="note_template",
        ),
        migrations.RemoveField(
            model_name="notetemplatequestion",
            name="question",
        ),
        migrations.AlterUniqueTogether(
            name="question",
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name="question",
            name="project",
        ),
        migrations.RemoveIndex(
            model_name="takeawaytype",
            name="note-type-vector-index",
        ),
        migrations.RemoveField(
            model_name="note",
            name="questions",
        ),
        migrations.RemoveField(
            model_name="takeaway",
            name="question",
        ),
        migrations.AlterField(
            model_name="takeawaytype",
            name="vector",
            field=pgvector.django.VectorField(dimensions=1536, null=True),
        ),
        migrations.RunPython(
            code=migrations.RunPython.noop,
            reverse_code=populate_takeaway_type_vector,
        ),
        migrations.RemoveField(
            model_name="takeawaytype",
            name="vector",
        ),
        migrations.AddField(
            model_name="asset",
            name="notes",
            field=models.ManyToManyField(related_name="assets", to="api.note"),
        ),
        migrations.RunPython(
            code=migrate_asset_filter_to_notes,
            reverse_code=revert_migrate_asset_filter_to_notes,
        ),
        migrations.RemoveField(
            model_name="asset",
            name="filter",
        ),
        migrations.AddField(
            model_name="takeawaytype",
            name="definition",
            field=models.CharField(default="", max_length=255),
            preserve_default=False,
        ),
        migrations.RunPython(
            code=populate_default_takeaway_type_definition,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.DeleteModel(
            name="NoteQuestion",
        ),
        migrations.DeleteModel(
            name="NoteTemplate",
        ),
        migrations.DeleteModel(
            name="NoteTemplateQuestion",
        ),
        migrations.DeleteModel(
            name="Question",
        ),
    ]
