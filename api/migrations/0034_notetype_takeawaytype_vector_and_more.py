# Generated by Django 4.2.3 on 2024-06-06 05:19

import django.db.models.deletion
import numpy as np
import pgvector.django
import shortuuid.django_fields
from django.db import migrations, models
from pgvector.django import MaxInnerProduct

from api.ai.embedder import embedder
from api.models.note_type import default_note_types
from api.models.takeaway_type import default_takeaway_types


def add_default_note_types_for_each_project(apps, schema_editor):
    Project = apps.get_model("api", "Project")
    NoteType = apps.get_model("api", "NoteType")

    vectors = embedder.embed_documents(default_note_types)

    note_types = []
    for project in Project.objects.all():
        for name, vector in zip(default_note_types, vectors):
            note_types.append(NoteType(project=project, name=name, vector=vector))

    NoteType.objects.bulk_create(note_types)


def revert_add_default_note_types_for_each_project(apps, schema_editor):
    NoteType = apps.get_model("api", "NoteType")
    NoteType.objects.all().delete()


def map_note_type_strings_to_ids(apps, schema_editor):
    Note = apps.get_model("api", "Note")

    notes = list(Note.objects.all())
    unique_types = list(set(note.type for note in notes))
    vectors = embedder.embed_documents(unique_types)
    vectors = {note_type: vector for note_type, vector in zip(unique_types, vectors)}
    vectors = [vectors[note.type] for note in notes]
    note_to_updates = []
    for note, vector in zip(notes, vectors):
        note_type = note.project.note_types.order_by(
            MaxInnerProduct("vector", vector)
        ).first()
        note.type = note_type.id
        note_to_updates.append(note)
    Note.objects.bulk_update(note_to_updates, ["type"])


def revert_map_note_type_strings_to_ids(apps, schema_editor):
    Note = apps.get_model("api", "Note")
    NoteType = apps.get_model("api", "NoteType")

    note_types = {note_type.id: note_type for note_type in NoteType.objects.all()}
    notes_to_update = []
    for note in Note.objects.all():
        note.type = note_types[note.type].name
        notes_to_update.append(note)

    Note.objects.bulk_update(notes_to_update, ["type"])


def add_default_takeaway_types_for_each_project(apps, schema_editor):
    Project = apps.get_model("api", "Project")
    TakeawayType = apps.get_model("api", "TakeawayType")
    if Project.objects.count() == 0:
        return

    default_takeaway_type_names = [
        takeaway_type["name"] for takeaway_type in default_takeaway_types
    ]

    takeaway_types_to_create = []
    takeaway_types_to_update = []
    for project in Project.objects.all():
        existing_takeaway_types = {
            takeaway_type.name: takeaway_type
            for takeaway_type in project.takeaway_types.all()
        }
        existing_takeaway_type_names = set(existing_takeaway_types.keys())
        for name in default_takeaway_type_names:
            if name not in existing_takeaway_type_names:
                takeaway_types_to_create.append(
                    TakeawayType(
                        project=project, name=name, vector=np.random.rand(1536)
                    )
                )
            else:
                takeaway_type = existing_takeaway_types[name]
                takeaway_type.vector = np.random.rand(1536)
                takeaway_types_to_update.append(takeaway_type)

    TakeawayType.objects.bulk_create(takeaway_types_to_create)
    TakeawayType.objects.bulk_update(takeaway_types_to_update, ["vector"])


def map_existing_takeaways_to_default_takeaway_types(apps, schema_editor):
    Takeaway = apps.get_model("api", "Takeaway")
    TakeawayType = apps.get_model("api", "TakeawayType")
    Project = apps.get_model("api", "Project")

    takeaways_to_update = []
    for project in Project.objects.all():
        target_takeaway_types = project.takeaway_types.filter(
            name__in=default_takeaway_types
        )
        for takeaway_type in project.takeaway_types.exclude(
            name__in=default_takeaway_types
        ):
            target_takeaway_type = target_takeaway_types.order_by(
                MaxInnerProduct("vector", takeaway_type.vector)
            ).first()
            for takeaway in takeaway_type.takeaways.all():
                takeaway.type = target_takeaway_type
                takeaways_to_update.append(takeaway)
    Takeaway.objects.bulk_update(takeaways_to_update, ["type"])
    TakeawayType.objects.exclude(name__in=default_takeaway_types).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("api", "0033_noteproperty_property_option_notepropertyoption_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="NoteType",
            fields=[
                (
                    "id",
                    shortuuid.django_fields.ShortUUIDField(
                        alphabet=None,
                        editable=False,
                        length=12,
                        max_length=12,
                        prefix="",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("vector", pgvector.django.VectorField(dimensions=1536)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.AddIndex(
            model_name="notetype",
            index=pgvector.django.HnswIndex(
                fields=["vector"],
                name="takeaway-type-vector-index",
                opclasses=["vector_ip_ops"],
            ),
        ),
        migrations.AddField(
            model_name="notetype",
            name="project",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="note_types",
                to="api.project",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="notetype",
            unique_together={("project", "name")},
        ),
        migrations.RunPython(
            code=add_default_note_types_for_each_project,
            reverse_code=revert_add_default_note_types_for_each_project,
        ),
        migrations.RunPython(
            code=map_note_type_strings_to_ids,
            reverse_code=revert_map_note_type_strings_to_ids,
        ),
        migrations.AlterField(
            model_name="note",
            name="type",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="notes",
                to="api.notetype",
            ),
        ),
        migrations.AddField(
            model_name="takeawaytype",
            name="vector",
            field=pgvector.django.VectorField(dimensions=1536, null=True),
        ),
        migrations.AddIndex(
            model_name="takeawaytype",
            index=pgvector.django.HnswIndex(
                fields=["vector"],
                name="note-type-vector-index",
                opclasses=["vector_ip_ops"],
            ),
        ),
        migrations.RunPython(
            code=add_default_takeaway_types_for_each_project,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RunPython(
            code=map_existing_takeaways_to_default_takeaway_types,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
